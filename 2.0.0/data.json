{
    "project": {
        "name": "OpenVeo server API for plugins",
        "description": "OpenVeo server side API for plugins",
        "version": "2.0.0"
    },
    "files": {
        "lib\\database\\mongodb\\MongoDatabase.js": {
            "name": "lib\\database\\mongodb\\MongoDatabase.js",
            "modules": {},
            "classes": {
                "MongoDatabase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\database\\mongodb\\doc.js": {
            "name": "lib\\database\\mongodb\\doc.js",
            "modules": {
                "mongodb": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib\\models\\EntityModel.js": {
            "name": "lib\\models\\EntityModel.js",
            "modules": {},
            "classes": {
                "EntityModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\models\\doc.js": {
            "name": "lib\\models\\doc.js",
            "modules": {
                "models": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib\\providers\\EntityProvider.js": {
            "name": "lib\\providers\\EntityProvider.js",
            "modules": {},
            "classes": {
                "EntityProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\providers\\doc.js": {
            "name": "lib\\providers\\doc.js",
            "modules": {
                "providers": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib\\Database.js": {
            "name": "lib\\Database.js",
            "modules": {
                "database": 1
            },
            "classes": {
                "Database": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\Plugin.js": {
            "name": "lib\\Plugin.js",
            "modules": {
                "plugin": 1
            },
            "classes": {
                "Plugin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\applicationStorage.js": {
            "name": "lib\\applicationStorage.js",
            "modules": {
                "application-storage": 1
            },
            "classes": {
                "applicationStorage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\fileSystem.js": {
            "name": "lib\\fileSystem.js",
            "modules": {
                "fileSystem": 1
            },
            "classes": {
                "fileSystem": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\i18n.js": {
            "name": "lib\\i18n.js",
            "modules": {
                "core-i18n": 1
            },
            "classes": {
                "core-i18n": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\logger.js": {
            "name": "lib\\logger.js",
            "modules": {
                "logger": 1
            },
            "classes": {
                "logger": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\util.js": {
            "name": "lib\\util.js",
            "modules": {
                "util": 1
            },
            "classes": {
                "util": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "mongodb": {
            "name": "mongodb",
            "submodules": {},
            "elements": {},
            "classes": {
                "MongoDatabase": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "lib\\database\\mongodb\\MongoDatabase.js",
            "line": 13,
            "description": "MongoDB database specific implementation.",
            "itemtype": "main"
        },
        "models": {
            "name": "models",
            "submodules": {},
            "elements": {},
            "classes": {
                "EntityModel": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "lib\\models\\EntityModel.js",
            "line": 9,
            "description": "A bunch of models to manipulate datas retrieved from providers.",
            "itemtype": "main"
        },
        "providers": {
            "name": "providers",
            "submodules": {},
            "elements": {},
            "classes": {
                "EntityProvider": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "lib\\providers\\EntityProvider.js",
            "line": 9,
            "description": "A bunch of providers to manipulate datas retrieved from a storage.",
            "itemtype": "main"
        },
        "database": {
            "name": "database",
            "submodules": {},
            "elements": {},
            "classes": {
                "Database": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib\\Database.js",
            "line": 9,
            "description": "Defines Database interface."
        },
        "plugin": {
            "name": "plugin",
            "submodules": {},
            "elements": {},
            "classes": {
                "Plugin": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib\\Plugin.js",
            "line": 9,
            "description": "Defines a Plugin."
        },
        "application-storage": {
            "name": "application-storage",
            "submodules": {},
            "elements": {},
            "classes": {
                "applicationStorage": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "lib\\applicationStorage.js",
            "line": 3,
            "description": "Application storage is a global storage for core and plugins, to be\nable to share information between both core and plugins.\n\nInformation stored in the application storage must be limited.",
            "itemtype": "main"
        },
        "fileSystem": {
            "name": "fileSystem",
            "submodules": {},
            "elements": {},
            "classes": {
                "fileSystem": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "lib\\fileSystem.js",
            "line": 3,
            "description": "Provides functions to interact with the file system as an extension to the Node.js filesystem module.",
            "itemtype": "main"
        },
        "core-i18n": {
            "name": "core-i18n",
            "submodules": {},
            "elements": {},
            "classes": {
                "core-i18n": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "lib\\i18n.js",
            "line": 3,
            "description": "Provides functions to help translates the application. Translations\nare grouped by dictionaries.",
            "itemtype": "main"
        },
        "logger": {
            "name": "logger",
            "submodules": {},
            "elements": {},
            "classes": {
                "logger": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "lib\\logger.js",
            "line": 3,
            "description": "Provides functions to manage loggers.",
            "itemtype": "main"
        },
        "util": {
            "name": "util",
            "submodules": {},
            "elements": {},
            "classes": {
                "util": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "lib\\util.js",
            "line": 5,
            "description": "Provides functions for common JavaScript operations.",
            "example": [
                "\n\n    // Get util\n    var util = require('@openveo/api').util;"
            ],
            "itemtype": "main"
        }
    },
    "classes": {
        "MongoDatabase": {
            "name": "MongoDatabase",
            "shortname": "MongoDatabase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "mongodb",
            "namespace": "",
            "file": "lib\\database\\mongodb\\MongoDatabase.js",
            "line": 13,
            "description": "Defines a MongoDB Database.\n\nMongoDatabase must not be used directly. Use Database to get an instance of MongoDatabase.",
            "example": [
                "\n\n    var api = require('@openveo/api');\n\n    // Example of a MongoDB database configuration object\n    var databaseConf = {\n      \"type\" : \"mongodb\", // Database type\n      \"host\" : \"localhost\", // MongoDB server host\n      \"port\" : 27017, // MongoDB port\n      \"database\" : \"DATABASE_NAME\", // Replace DATABASE_NAME by the name of the OpenVeo database\n      \"username\" : \"DATABASE_USER_NAME\", // Replace DATABASE_USER_NAME by the name of the database user\n      \"password\" : \"DATABASE_USER_PWD\", // Replace DATABASE_USER_PWD  by the password of the database user\n      \"replicaSet\" : \"REPLICA_SET_NAME\", // Replace REPLICA_SET_NAME by the name of the ReplicaSet\n      \"seedlist\": \"IP_1:PORT_1,IP_2:PORT_2\" // The comma separated list of secondary servers\n    };\n\n    // Get a MongoDB database instance\n    var db = api.Database.getDatabase(databaseConf);"
            ],
            "extends": "Database",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Object",
                    "description": "databaseConf A database configuration object"
                }
            ]
        },
        "EntityModel": {
            "name": "EntityModel",
            "shortname": "EntityModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "models",
            "namespace": "",
            "file": "lib\\models\\EntityModel.js",
            "line": 9,
            "description": "Defines class EntityModel.\n\nThe EntityModel provides basic CRUD (**C**read **R**ead **U**pdate **D**elete) operations on entities.<br/>\nAll entities models must extend EntityModel. EntityModel must not be used directly. Use one of its sub class\ninstead.\n\nEach entity as it's own associated Model (sub class of EntityModel).",
            "example": [
                "\n\n    // Example for implementing a new EntityModel named \"CustomModel\"\n\n    // CustomModel.js\n\n    var util = require('util');\n    var api = require('@openveo/api');\n    var CustomProvider = process.require('CustomProvider.js');\n\n    function CustomModel() {\n\n      // Initialize the entity model with a dedicated provider\n      api.EntityModel.prototype.init.call(this, new CustomProvider(api.applicationStorage.getDatabase()));\n\n    }\n\n    // CustomModel must extends EntityModel\n    module.exports = CustomModel;\n    util.inherits(CustomModel, api.EntityModel);",
                "\n\n    // Example for how to use CustomModel defined in previous example\n\n    var api = require('@openveo/api');\n\n    var CustomModel = process.require('CustomModel.js');\n    var model = new CustomModel();"
            ],
            "is_constructor": 1
        },
        "EntityProvider": {
            "name": "EntityProvider",
            "shortname": "EntityProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "lib\\providers\\EntityProvider.js",
            "line": 9,
            "description": "Defines class EntityProvider.\n\nThe EntityProvider offers basic CRUD (**C**read **R**ead **U**pdate **D**elete) operations on a collection.<br/>\nEntityProvider must not be used directly. Use one of its sub class instead.\n\nEach entity model as it's own associated Provider (sub class of EntityProvider).",
            "example": [
                "\n\n    // Example for implementing a new EntityProvider named \"CustomProvider\"\n\n    // CustomProvider.js\n\n     var util = require('util');\n     var api = require('@openveo/api');\n\n     function CustomProvider(database) {\n\n       // Initialize the entity provider with collection \"customCollection\"\n       api.EntityProvider.prototype.init.call(this, database, 'customCollection');\n\n     }\n\n     // CustomProvider must extend EntityProvider\n     module.exports = CustomProvider;\n     util.inherits(CustomProvider, api.EntityProvider);",
                "\n\n    // Example for how to use CustomProvider defined in previous example\n\n    var api = require('@openveo/api');\n\n    var CustomProvider = process.require('CustomProvider.js');\n    var provider = new CustomProvider(api.applicationStorage.getDatabase()));"
            ],
            "is_constructor": 1
        },
        "Database": {
            "name": "Database",
            "shortname": "Database",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "database",
            "namespace": "",
            "file": "lib\\Database.js",
            "line": 9,
            "description": "Saves database configuration.",
            "example": [
                "\n\n    // Example for how to use MongoDB database\n\n    var api = require('@openveo/api');\n    var databaseConf = {\n     ...\n    };\n\n    // Create a new instance of the database\n    var db = api.Database.get(databaseConf);\n\n    // Prefer using OpenVeo database instance\n    var db = api.applicationStorage.getDatabase();"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "databaseConf",
                    "description": "A database configuration object",
                    "type": "Object"
                }
            ]
        },
        "Plugin": {
            "name": "Plugin",
            "shortname": "Plugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "plugin",
            "namespace": "",
            "file": "lib\\Plugin.js",
            "line": 9,
            "description": "Each plugin which wants to be loaded by core must inherit from this class.\n\nThis Class must not be used directly, instead create a sub class.",
            "example": [
                "\n\n    // Example for implementing a new Plugin named \"MyPlugin\"\n\n    // MyPlugin.js\n\n    var openVeoAPI = require('@openveo/api');\n    function MyPlugin(){\n\n      // Creates admin and front new routers\n      this.router = express.Router();\n      this.adminRouter = express.Router();\n      this.webServiceRouter = express.Router();\n\n      // Define routes directly here or in the configuration file\n\n    }\n\n    MyPlugin.prototype.start = function() {\n      console.log('My plugin loaded');\n    };\n\n    module.exports = MyPlugin;\n    util.inherits(MyPlugin, openVeoAPI.Plugin);"
            ],
            "is_constructor": 1
        },
        "applicationStorage": {
            "name": "applicationStorage",
            "shortname": "applicationStorage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "application-storage",
            "namespace": "",
            "file": "lib\\applicationStorage.js",
            "line": 3,
            "description": "Application storage is a global storage for core and plugins, to be\nable to share information between both core and plugins.\n\nInformation stored in the application storage must be limited."
        },
        "fileSystem": {
            "name": "fileSystem",
            "shortname": "fileSystem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "fileSystem",
            "namespace": "",
            "file": "lib\\fileSystem.js",
            "line": 3,
            "description": "Provides functions to interact with the file system as an extension to the Node.js filesystem module."
        },
        "core-i18n": {
            "name": "core-i18n",
            "shortname": "core-i18n",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-i18n",
            "namespace": "",
            "file": "lib\\i18n.js",
            "line": 3,
            "description": "Provides functions to help translates the application. Translations\nare grouped by dictionaries."
        },
        "logger": {
            "name": "logger",
            "shortname": "logger",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "logger",
            "namespace": "",
            "file": "lib\\logger.js",
            "line": 3,
            "description": "Provides functions to manage loggers."
        },
        "util": {
            "name": "util",
            "shortname": "util",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "util",
            "namespace": "",
            "file": "lib\\util.js",
            "line": 5,
            "description": "Provides functions for common JavaScript operations.",
            "example": [
                "\n\n    // Get util\n    var util = require('@openveo/api').util;"
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "lib\\database\\mongodb\\MongoDatabase.js",
            "line": 49,
            "description": "Establishes connection to the database.",
            "itemtype": "method",
            "name": "connect",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when connection to the database is established\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "MongoDatabase",
            "module": "mongodb"
        },
        {
            "file": "lib\\database\\mongodb\\MongoDatabase.js",
            "line": 84,
            "description": "Closes connection to the database.",
            "itemtype": "method",
            "name": "close",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when connection is closed\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "MongoDatabase",
            "module": "mongodb"
        },
        {
            "file": "lib\\database\\mongodb\\MongoDatabase.js",
            "line": 96,
            "description": "Inserts several documents into a collection.",
            "itemtype": "method",
            "name": "insert",
            "async": 1,
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to work on",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Document(s) to insert into the collection",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The total amount of documents inserted\n  - **Array** All the documents inserted",
                    "type": "Function"
                }
            ],
            "class": "MongoDatabase",
            "module": "mongodb"
        },
        {
            "file": "lib\\database\\mongodb\\MongoDatabase.js",
            "line": 122,
            "description": "Removes several documents from a collection.",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to work on",
                    "type": "String"
                },
                {
                    "name": "filter",
                    "description": "Filters formatted like MongoDB filters",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of deleted documents",
                    "type": "Function"
                }
            ],
            "class": "MongoDatabase",
            "module": "mongodb"
        },
        {
            "file": "lib\\database\\mongodb\\MongoDatabase.js",
            "line": 147,
            "description": "Removes a property on all documents in the collection.",
            "itemtype": "method",
            "name": "removeProp",
            "async": 1,
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to work on",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "The property name to remove",
                    "type": "String"
                },
                {
                    "name": "filter",
                    "description": "Filters formatted like MongoDB filters",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated documents",
                    "type": "Function"
                }
            ],
            "class": "MongoDatabase",
            "module": "mongodb"
        },
        {
            "file": "lib\\database\\mongodb\\MongoDatabase.js",
            "line": 181,
            "description": "Updates several documents from collection.",
            "itemtype": "method",
            "name": "update",
            "async": 1,
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to work on",
                    "type": "String"
                },
                {
                    "name": "filter",
                    "description": "Filters formatted like MongoDB filters",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Document data",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated documents",
                    "type": "Function"
                }
            ],
            "class": "MongoDatabase",
            "module": "mongodb"
        },
        {
            "file": "lib\\database\\mongodb\\MongoDatabase.js",
            "line": 209,
            "description": "Gets a list of documents.",
            "itemtype": "method",
            "name": "get",
            "async": 1,
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to work on",
                    "type": "String"
                },
                {
                    "name": "criteria",
                    "description": "MongoDB criterias",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "projection",
                    "description": "MongoDB projection",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "limit",
                    "description": "A limit number of items to retrieve (all by default)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Array** The retrieved documents",
                    "type": "Function"
                }
            ],
            "class": "MongoDatabase",
            "module": "mongodb"
        },
        {
            "file": "lib\\database\\mongodb\\MongoDatabase.js",
            "line": 238,
            "description": "Gets an ordered list of documents by page.",
            "itemtype": "method",
            "name": "search",
            "async": 1,
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to work on",
                    "type": "String"
                },
                {
                    "name": "criteria",
                    "description": "MongoDB criterias",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "projection",
                    "description": "MongoDB projection",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "limit",
                    "description": "The maximum number of expected documents",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "page",
                    "description": "The expected page",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "sort",
                    "description": "A sort object",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Array** The list of documents\n  - **Object** Pagination information",
                    "type": "Function"
                }
            ],
            "class": "MongoDatabase",
            "module": "mongodb"
        },
        {
            "file": "lib\\models\\EntityModel.js",
            "line": 56,
            "description": "Initializes an EntityModel with a provider.",
            "itemtype": "method",
            "name": "init",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "provider",
                    "description": "The entity provider",
                    "type": "EntityProvider"
                }
            ],
            "class": "EntityModel",
            "module": "models"
        },
        {
            "file": "lib\\models\\EntityModel.js",
            "line": 70,
            "description": "Gets a single entity by its id.",
            "itemtype": "method",
            "name": "getOne",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The entity id",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The entity",
                    "type": "Function"
                }
            ],
            "class": "EntityModel",
            "module": "models"
        },
        {
            "file": "lib\\models\\EntityModel.js",
            "line": 84,
            "description": "Gets all entities.",
            "itemtype": "method",
            "name": "get",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Array** The list of entities",
                    "type": "Function"
                }
            ],
            "class": "EntityModel",
            "module": "models"
        },
        {
            "file": "lib\\models\\EntityModel.js",
            "line": 97,
            "description": "Gets a list of filtered entities",
            "itemtype": "method",
            "name": "getByFilter",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "A MongoDB filter",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The entity",
                    "type": "Function"
                }
            ],
            "class": "EntityModel",
            "module": "models"
        },
        {
            "file": "lib\\models\\EntityModel.js",
            "line": 111,
            "description": "Gets an ordered list of entities by page.",
            "itemtype": "method",
            "name": "getPaginatedFilteredEntities",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "MongoDB filter",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "limit",
                    "description": "The maximum number of expected entities",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "page",
                    "description": "The expected page",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "sort",
                    "description": "A sort object",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "populate",
                    "description": "true to automatically populate results with additional information",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Array** The list of entities\n  - **Object** Pagination information",
                    "type": "Function"
                }
            ],
            "class": "EntityModel",
            "module": "models"
        },
        {
            "file": "lib\\models\\EntityModel.js",
            "line": 131,
            "description": "Adds a new entity.",
            "itemtype": "method",
            "name": "add",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "Entity data to store into the collection, its structure depends on the type of entity",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The added entity",
                    "type": "Function"
                }
            ],
            "class": "EntityModel",
            "module": "models"
        },
        {
            "file": "lib\\models\\EntityModel.js",
            "line": 149,
            "description": "Updates an entity.",
            "itemtype": "method",
            "name": "update",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the entity to update",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Entity data, its structure depends on the type of entity",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "EntityModel",
            "module": "models"
        },
        {
            "file": "lib\\models\\EntityModel.js",
            "line": 164,
            "description": "Removes one or several entities.",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "ids",
                    "description": "Id(s) of the document(s) to remove from the collection",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of deleted entities",
                    "type": "Function"
                }
            ],
            "class": "EntityModel",
            "module": "models"
        },
        {
            "file": "lib\\providers\\EntityProvider.js",
            "line": 55,
            "description": "Initializes an EntityProvider with a collection.",
            "itemtype": "method",
            "name": "init",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "database",
                    "description": "The database to interact with",
                    "type": "Database"
                },
                {
                    "name": "collection",
                    "description": "The collection name where entities are stored",
                    "type": "String"
                }
            ],
            "class": "EntityProvider",
            "module": "providers"
        },
        {
            "file": "lib\\providers\\EntityProvider.js",
            "line": 75,
            "description": "Gets an entity.",
            "itemtype": "method",
            "name": "getOne",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The entity id",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The entity",
                    "type": "Function"
                }
            ],
            "class": "EntityProvider",
            "module": "providers"
        },
        {
            "file": "lib\\providers\\EntityProvider.js",
            "line": 100,
            "description": "Gets an entity filter by custom filter.",
            "itemtype": "method",
            "name": "getByFilter",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "A MongoDB filter",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The entity",
                    "type": "Function"
                }
            ],
            "class": "EntityProvider",
            "module": "providers"
        },
        {
            "file": "lib\\providers\\EntityProvider.js",
            "line": 119,
            "description": "Gets an ordered list of entities by page.",
            "itemtype": "method",
            "name": "getPaginatedFilteredEntities",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "MongoDB filter",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "limit",
                    "description": "The maximum number of expected entities",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "page",
                    "description": "The expected page",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "sort",
                    "description": "A sort object",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Array** The list of entities\n  - **Object** Pagination information",
                    "type": "Function"
                }
            ],
            "class": "EntityProvider",
            "module": "providers"
        },
        {
            "file": "lib\\providers\\EntityProvider.js",
            "line": 137,
            "description": "Gets all entities.",
            "itemtype": "method",
            "name": "get",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Array** The list of entities",
                    "type": "Function"
                }
            ],
            "class": "EntityProvider",
            "module": "providers"
        },
        {
            "file": "lib\\providers\\EntityProvider.js",
            "line": 153,
            "description": "Adds a new entity.",
            "itemtype": "method",
            "name": "add",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "Data to store into the collection, its structure depends on the entity type",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The total amount of documents inserted\n  - **Array** All the documents inserted",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "EntityProvider",
            "module": "providers"
        },
        {
            "file": "lib\\providers\\EntityProvider.js",
            "line": 174,
            "description": "Updates an entity.\n\nIf the entity has the property \"locked\", it won't be updated.",
            "itemtype": "method",
            "name": "update",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the entity to update",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Entity data, its structure depends on the entity type",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "EntityProvider",
            "module": "providers"
        },
        {
            "file": "lib\\providers\\EntityProvider.js",
            "line": 199,
            "description": "Removes one or several entities.\n\nIf the entity has the property \"locked\", it won't be removed.",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "ids",
                    "description": "Id(s) of the document(s) to remove from the collection",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of deleted entities",
                    "type": "Function"
                }
            ],
            "class": "EntityProvider",
            "module": "providers"
        },
        {
            "file": "lib\\providers\\EntityProvider.js",
            "line": 223,
            "description": "Removes a property on all documents in the collection.\n\nIf the entity has the property \"locked\", it won't be updated.",
            "itemtype": "method",
            "name": "removeProp",
            "async": 1,
            "params": [
                {
                    "name": "property",
                    "description": "The property name to remove",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of modified entities",
                    "type": "Function"
                }
            ],
            "class": "EntityProvider",
            "module": "providers"
        },
        {
            "file": "lib\\Database.js",
            "line": 41,
            "description": "Gets an instance of a Database using the given\ndatabase configuration.",
            "itemtype": "method",
            "name": "getDatabase",
            "static": 1,
            "params": [
                {
                    "name": "databaseConf",
                    "description": "A database configuration object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A Database instance",
                "type": "Database"
            },
            "class": "Database",
            "module": "database"
        },
        {
            "file": "lib\\Database.js",
            "line": 68,
            "description": "Establishes connection to the database.",
            "itemtype": "method",
            "name": "connect",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when connection to the database is established\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "Database",
            "module": "database"
        },
        {
            "file": "lib\\Database.js",
            "line": 80,
            "description": "Closes connection to the database.",
            "itemtype": "method",
            "name": "close",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when connection is closed\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "Database",
            "module": "database"
        },
        {
            "file": "lib\\Database.js",
            "line": 92,
            "description": "Inserts several documents into a collection.",
            "itemtype": "method",
            "name": "insert",
            "async": 1,
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to work on",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Document(s) to insert into the collection",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The total amount of documents inserted\n  - **Array** All the documents inserted",
                    "type": "Function"
                }
            ],
            "class": "Database",
            "module": "database"
        },
        {
            "file": "lib\\Database.js",
            "line": 108,
            "description": "Removes several documents from a collection.",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to work on",
                    "type": "String"
                },
                {
                    "name": "filter",
                    "description": "Filters formatted like MongoDB filters",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of deleted documents",
                    "type": "Function"
                }
            ],
            "class": "Database",
            "module": "database"
        },
        {
            "file": "lib\\Database.js",
            "line": 123,
            "description": "Removes a property on all documents in the collection.",
            "itemtype": "method",
            "name": "removeProp",
            "async": 1,
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to work on",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "The property name to remove",
                    "type": "String"
                },
                {
                    "name": "filter",
                    "description": "Filters formatted like MongoDB filters",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated documents",
                    "type": "Function"
                }
            ],
            "class": "Database",
            "module": "database"
        },
        {
            "file": "lib\\Database.js",
            "line": 139,
            "description": "Updates several documents from collection.",
            "itemtype": "method",
            "name": "update",
            "async": 1,
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to work on",
                    "type": "String"
                },
                {
                    "name": "filter",
                    "description": "Filters formatted like MongoDB filters",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Document data",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated documents",
                    "type": "Function"
                }
            ],
            "class": "Database",
            "module": "database"
        },
        {
            "file": "lib\\Database.js",
            "line": 155,
            "description": "Gets a list of documents.",
            "itemtype": "method",
            "name": "get",
            "async": 1,
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to work on",
                    "type": "String"
                },
                {
                    "name": "criteria",
                    "description": "MongoDB criterias",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "projection",
                    "description": "MongoDB projection",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "limit",
                    "description": "A limit number of items to retrieve (all by default)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Array** The retrieved documents",
                    "type": "Function"
                }
            ],
            "class": "Database",
            "module": "database"
        },
        {
            "file": "lib\\Database.js",
            "line": 172,
            "description": "Gets an ordered list of documents by page.",
            "itemtype": "method",
            "name": "search",
            "async": 1,
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to work on",
                    "type": "String"
                },
                {
                    "name": "criteria",
                    "description": "MongoDB criterias",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "projection",
                    "description": "MongoDB projection",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "limit",
                    "description": "The maximum number of expected documents",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "page",
                    "description": "The expected page",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "sort",
                    "description": "A sort object",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Array** The list of documents\n  - **Object** Pagination information",
                    "type": "Function"
                }
            ],
            "class": "Database",
            "module": "database"
        },
        {
            "file": "lib\\Plugin.js",
            "line": 48,
            "description": "The plugin public express router (all routes mounted on this router will be public).",
            "itemtype": "property",
            "name": "router",
            "default": "null",
            "type": "Router",
            "class": "Plugin",
            "module": "plugin"
        },
        {
            "file": "lib\\Plugin.js",
            "line": 57,
            "description": "The plugin back end express router (all routes mounted on this router will require user authentication).",
            "itemtype": "property",
            "name": "adminRouter",
            "default": "null",
            "type": "Router",
            "class": "Plugin",
            "module": "plugin"
        },
        {
            "file": "lib\\Plugin.js",
            "line": 66,
            "description": "The plugin web service express router (all routes mounted on this router will require a web\nservice authentication).",
            "itemtype": "property",
            "name": "webServiceRouter",
            "default": "null",
            "type": "Router",
            "class": "Plugin",
            "module": "plugin"
        },
        {
            "file": "lib\\Plugin.js",
            "line": 76,
            "description": "Indicates that the plugin is fully loaded.\n\nThis won't be called by the Web Service.",
            "itemtype": "method",
            "name": "start",
            "class": "Plugin",
            "module": "plugin"
        },
        {
            "file": "lib\\applicationStorage.js",
            "line": 22,
            "description": "Gets the list of loaded openveo plugins.",
            "example": [
                "\n\n    var api = require('@openveo/api');\n    api.applicationStorage.getPlugins();"
            ],
            "itemtype": "method",
            "name": "getPlugins",
            "return": {
                "description": "The list of loaded plugins",
                "type": "Array"
            },
            "class": "applicationStorage",
            "module": "application-storage"
        },
        {
            "file": "lib\\applicationStorage.js",
            "line": 37,
            "description": "Sets the list of openveo plugins.",
            "params": [
                {
                    "name": "subPlugins",
                    "description": "The list of plugins",
                    "type": "Array"
                }
            ],
            "class": "applicationStorage",
            "module": "application-storage"
        },
        {
            "file": "lib\\applicationStorage.js",
            "line": 46,
            "description": "Gets the computed back office menu with all links.",
            "example": [
                "\n\n    var api = require('@openveo/api');\n    api.applicationStorage.getMenu();"
            ],
            "itemtype": "method",
            "name": "getMenu",
            "return": {
                "description": "The list of back office links",
                "type": "Array"
            },
            "class": "applicationStorage",
            "module": "application-storage"
        },
        {
            "file": "lib\\applicationStorage.js",
            "line": 61,
            "description": "Sets the back office menu list of links.",
            "params": [
                {
                    "name": "newMenu",
                    "description": "The list of back office menu links",
                    "type": "Array"
                }
            ],
            "class": "applicationStorage",
            "module": "application-storage"
        },
        {
            "file": "lib\\applicationStorage.js",
            "line": 70,
            "description": "Gets the current database instance.",
            "example": [
                "\n\n    var api = require('@openveo/api');\n    api.applicationStorage.getDatabase();"
            ],
            "itemtype": "method",
            "name": "getDatabase",
            "return": {
                "description": "A Database object",
                "type": "Database"
            },
            "class": "applicationStorage",
            "module": "application-storage"
        },
        {
            "file": "lib\\applicationStorage.js",
            "line": 85,
            "description": "Sets a new database instance as the current database.",
            "params": [
                {
                    "name": "newDatabase",
                    "description": "The new database of the application",
                    "type": "Database"
                }
            ],
            "class": "applicationStorage",
            "module": "application-storage"
        },
        {
            "file": "lib\\applicationStorage.js",
            "line": 94,
            "description": "Sets the web service list of scopes.",
            "params": [
                {
                    "name": "newScopes",
                    "description": "The new list of scopes of the web service",
                    "type": "Object"
                }
            ],
            "class": "applicationStorage",
            "module": "application-storage"
        },
        {
            "file": "lib\\applicationStorage.js",
            "line": 103,
            "description": "Gets the list of web service scopes defined by core and plugins.",
            "example": [
                "\n\n    var api = require('@openveo/api');\n    api.applicationStorage.getWebServiceScopes();"
            ],
            "itemtype": "method",
            "name": "getWebServiceScopes",
            "return": {
                "description": "scopes",
                "type": "Object"
            },
            "class": "applicationStorage",
            "module": "application-storage"
        },
        {
            "file": "lib\\applicationStorage.js",
            "line": 118,
            "description": "Sets the list of permissions.",
            "params": [
                {
                    "name": "permissions",
                    "description": "The new list of permissions",
                    "type": "Object"
                }
            ],
            "class": "applicationStorage",
            "module": "application-storage"
        },
        {
            "file": "lib\\applicationStorage.js",
            "line": 127,
            "description": "Gets the list of permissions defined by core and plugins.",
            "example": [
                "\n\n    var api = require('@openveo/api');\n    api.applicationStorage.getPermissions();"
            ],
            "itemtype": "method",
            "name": "getPermissions",
            "return": {
                "description": "permissions",
                "type": "Object"
            },
            "class": "applicationStorage",
            "module": "application-storage"
        },
        {
            "file": "lib\\applicationStorage.js",
            "line": 142,
            "description": "Sets the list of entities.",
            "params": [
                {
                    "name": "newEntities",
                    "description": "The list of entities",
                    "type": "Object"
                }
            ],
            "class": "applicationStorage",
            "module": "application-storage"
        },
        {
            "file": "lib\\applicationStorage.js",
            "line": 151,
            "description": "Gets the list of entities defined by both core and loaded plugins.",
            "example": [
                "\n\n    var api = require('@openveo/api');\n    api.applicationStorage.getEntities();"
            ],
            "itemtype": "method",
            "name": "getEntities",
            "return": {
                "description": "entities",
                "type": "Object"
            },
            "class": "applicationStorage",
            "module": "application-storage"
        },
        {
            "file": "lib\\fileSystem.js",
            "line": 15,
            "description": "Creates a directory recursively and asynchronously.\n\nIf parent directories do not exist, they will be automatically created.",
            "itemtype": "method",
            "name": "mkdirRecursive",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "directoryPath",
                    "description": "The directory system path to create",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "fileSystem",
            "module": "fileSystem"
        },
        {
            "file": "lib\\fileSystem.js",
            "line": 67,
            "description": "Removes a directory and all its content recursively and asynchronously.\n\nIt is assumed that the directory exists.",
            "itemtype": "method",
            "name": "rmdirRecursive",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "directoryPath",
                    "description": "Path of the directory to remove",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "fileSystem",
            "module": "fileSystem"
        },
        {
            "file": "lib\\fileSystem.js",
            "line": 150,
            "description": "Copies a file.\n\nIf directory does not exist it will be automatically created.",
            "itemtype": "method",
            "name": "copyFile",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "sourceFilePath",
                    "description": "Path of the file",
                    "type": "String"
                },
                {
                    "name": "destinationFilePath",
                    "description": "Final path of the file",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "fileSystem",
            "module": "fileSystem"
        },
        {
            "file": "lib\\fileSystem.js",
            "line": 199,
            "description": "Extracts a tar file to the given directory.",
            "itemtype": "method",
            "name": "extract",
            "async": 1,
            "params": [
                {
                    "name": "filePath",
                    "description": "Path of the file to extract",
                    "type": "String"
                },
                {
                    "name": "destinationPath",
                    "description": "Path of the directory where to\nextract files",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "fileSystem",
            "module": "fileSystem"
        },
        {
            "file": "lib\\fileSystem.js",
            "line": 257,
            "description": "Copies a file or a directory.",
            "itemtype": "method",
            "name": "copy",
            "async": 1,
            "params": [
                {
                    "name": "sourcePath",
                    "description": "Path of the source to copy",
                    "type": "String"
                },
                {
                    "name": "destinationSourcePath",
                    "description": "Final path of the source",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "fileSystem",
            "module": "fileSystem"
        },
        {
            "file": "lib\\fileSystem.js",
            "line": 324,
            "description": "Gets a JSON file content.\n\nThis will verify that the file exists first.",
            "itemtype": "method",
            "name": "getJSONFileContent",
            "async": 1,
            "params": [
                {
                    "name": "filePath",
                    "description": "The path of the file to read",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when done\n  - **Error** The error if an error occurred, null otherwise\n  - **String** The file content or null if an error occurred",
                    "type": "Function"
                }
            ],
            "class": "fileSystem",
            "module": "fileSystem"
        },
        {
            "file": "lib\\fileSystem.js",
            "line": 370,
            "description": "Creates a directory.\n\nIf parent directory does not exist, it will be automatically created.\nIf directory already exists, it won't do anything.",
            "itemtype": "method",
            "name": "mkdir",
            "async": 1,
            "params": [
                {
                    "name": "directoryPath",
                    "description": "The directory system path to create",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "fileSystem",
            "module": "fileSystem"
        },
        {
            "file": "lib\\fileSystem.js",
            "line": 391,
            "description": "Removes a directory and all its content recursively and asynchronously.",
            "itemtype": "method",
            "name": "rmdir",
            "async": 1,
            "params": [
                {
                    "name": "directoryPath",
                    "description": "Path of the directory to remove",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "fileSystem",
            "module": "fileSystem"
        },
        {
            "file": "lib\\fileSystem.js",
            "line": 409,
            "description": "Gets OpenVeo configuration directory path.\n\nOpenVeo configuration is stored in user home directory.",
            "itemtype": "method",
            "name": "getConfDir",
            "return": {
                "description": "OpenVeo configuration directory path",
                "type": "String"
            },
            "class": "fileSystem",
            "module": "fileSystem"
        },
        {
            "file": "lib\\i18n.js",
            "line": 18,
            "description": "Gets a dictionary of translations by its name and language.\nSearch is made on i18n directory and all plugin's i18n directories.\nIf the same dictionary name is found twice (same file name in\ndifferent i18n directories), dictionaries are merged.",
            "example": [
                "\n    var i18n = require('@openveo/api').i18n;\n    i18n.getTranslations('login', 'fr-FR', null, function(translations){\n      console.log(translations);\n    });",
                "\n    var i18n = require('@openveo/api').i18n;\n    i18n.getTranslations(\"back-office\", \"en\", \"admin\", function(translations){\n      console.log(translations);\n    });"
            ],
            "itemtype": "method",
            "name": "getTranslations",
            "async": 1,
            "params": [
                {
                    "name": "dictionary",
                    "description": "The name of the dictionary, this is the name of the dictionary file without\nextension",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The language country code (e.g. en-US)",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when its done\n - *Object* A JavaScript object containing all translations",
                    "type": "Function"
                }
            ],
            "class": "core-i18n",
            "module": "core-i18n"
        },
        {
            "file": "lib\\logger.js",
            "line": 13,
            "description": "Adds a new logger.\n\nAdded loggers will also log to process standard output in development mode (not in production).",
            "example": [
                "\n    var loggerAPI = require('@openveo/api').logger;\n\n    var conf =  {\n     'fileName' : '/tmp/openveo/logs/openveo.log',\n     'level' : 'debug',\n     'maxFileSize' : 1048576,\n     'maxFiles' : 2\n    };\n\n    // Initializes logger \"openveo\"\n    loggerAPI.add('openveo', conf);\n    var logger = loggerAPI.get('openveo');\n\n    // Log something\n    logger.info('A simple log');"
            ],
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the logger",
                    "type": "String"
                },
                {
                    "name": "conf",
                    "description": "Logger configuration to initialize a new logger\nAvailable debug levels are :\n - silly\n - debug\n - verbose\n - info\n - warn\n - error",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "logger",
            "module": "logger"
        },
        {
            "file": "lib\\logger.js",
            "line": 68,
            "description": "Gets a logger.",
            "example": [
                "\n    var loggerAPI = require('@openveo/api').logger;\n\n    // Get openveo logger\n    var logger = loggerAPI.get('openveo');\n\n    // Log something\n    logger.info('A simple log');"
            ],
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the logger",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A winston logger",
                "type": "Object"
            },
            "class": "logger",
            "module": "logger"
        },
        {
            "file": "lib\\util.js",
            "line": 18,
            "description": "Merges, recursively, all properties of object2 in object1.\n\nThis will not create copies of objects.",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "object1",
                    "description": "The JavaScript final object",
                    "type": "Object"
                },
                {
                    "name": "object2",
                    "description": "A second JavaScript object to merge into\nthe first one",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "object1",
                "type": "Object"
            },
            "class": "util",
            "module": "util"
        },
        {
            "file": "lib\\util.js",
            "line": 55,
            "description": "Merges two arrays without any duplicated value.",
            "itemtype": "method",
            "name": "joinArray",
            "params": [
                {
                    "name": "array1",
                    "description": "A JavaScript array",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "array2",
                    "description": "A JavaScript array",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": "util",
            "module": "util"
        },
        {
            "file": "lib\\util.js",
            "line": 70,
            "description": "Checks if an email address is valid or not.",
            "itemtype": "method",
            "name": "isEmailValid",
            "params": [
                {
                    "name": "email",
                    "description": "The email address",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the email is valid, false otherwise",
                "type": "Boolean"
            },
            "class": "util",
            "module": "util"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nSets the list of openveo plugins.",
            "line": " lib\\applicationStorage.js:37"
        },
        {
            "message": "Missing item type\nSets the back office menu list of links.",
            "line": " lib\\applicationStorage.js:61"
        },
        {
            "message": "Missing item type\nSets a new database instance as the current database.",
            "line": " lib\\applicationStorage.js:85"
        },
        {
            "message": "Missing item type\nSets the web service list of scopes.",
            "line": " lib\\applicationStorage.js:94"
        },
        {
            "message": "Missing item type\nSets the list of permissions.",
            "line": " lib\\applicationStorage.js:118"
        },
        {
            "message": "Missing item type\nSets the list of entities.",
            "line": " lib\\applicationStorage.js:142"
        }
    ]
}